package View;

import FarmerPuzzle.FarmerPuzzle;
import Utilities.Utilities;
import java.util.ArrayList;
import java.util.TreeSet;
import javax.swing.JOptionPane;

public class FarmerPuzzleGUI extends javax.swing.JFrame {

    FarmerPuzzle obj = new FarmerPuzzle();
    TreeSet<String> left = new TreeSet<String>();
    TreeSet<String> right = new TreeSet<String>();
    String bank;
    int y_granjero_pos = 270;
    int y_lobo_pos = 380;
    int y_oveja_pos = 530;
    int y_col_pos = 450;
    boolean valid;
    private Utilities util = new Utilities();

    /**
     * Creates new form FarmerPuzzleGUI
     */
    public FarmerPuzzleGUI() {
        initComponents();
        //Estado Inicial por default
        left.add("L");
        left.add("O");
        left.add("C");
        left.add("G");
        bank = "left";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        btnAnchura = new javax.swing.JButton();
        btnProfundidad = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        initCol = new javax.swing.JComboBox<>();
        initGranjero = new javax.swing.JComboBox<>();
        initLobo = new javax.swing.JComboBox<>();
        initOveja = new javax.swing.JComboBox<>();
        G = new javax.swing.JLabel();
        O = new javax.swing.JLabel();
        L = new javax.swing.JLabel();
        C = new javax.swing.JLabel();
        bote = new javax.swing.JLabel();
        bankLeft = new javax.swing.JLabel();
        rio = new javax.swing.JLabel();
        bankRight = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Graph = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 102));
        setPreferredSize(new java.awt.Dimension(990, 680));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Busqueda");

        btnAnchura.setText("Anchura");

        btnProfundidad.setText("Profundidad");
        btnProfundidad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnProfundidadMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(btnProfundidad, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(btnAnchura, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnchura)
                    .addComponent(btnProfundidad))
                .addContainerGap())
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 490, 80));

        jPanel1.setBackground(new java.awt.Color(151, 153, 168));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Granjero");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, -1, 23));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Estado Inicial");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 10, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Lobo");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 50, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Oveja");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 50, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Col");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 50, 35, -1));

        initCol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "left", "right" }));
        initCol.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                initColItemStateChanged(evt);
            }
        });
        jPanel1.add(initCol, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 50, 70, -1));

        initGranjero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "left", "right" }));
        initGranjero.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                initGranjeroItemStateChanged(evt);
            }
        });
        jPanel1.add(initGranjero, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, 70, -1));

        initLobo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "left", "right" }));
        initLobo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                initLoboItemStateChanged(evt);
            }
        });
        jPanel1.add(initLobo, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, 70, -1));

        initOveja.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "left", "right" }));
        initOveja.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                initOvejaItemStateChanged(evt);
            }
        });
        jPanel1.add(initOveja, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 50, 70, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 990, 150));

        G.setIcon(new javax.swing.ImageIcon("C:\\Users\\tomas\\Downloads\\iloveimg-resized\\granjero.png")); // NOI18N
        getContentPane().add(G, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, 50, 107));

        O.setIcon(new javax.swing.ImageIcon("C:\\Users\\tomas\\Downloads\\iloveimg-resized\\gallo.png")); // NOI18N
        getContentPane().add(O, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 530, 50, 60));

        L.setIcon(new javax.swing.ImageIcon("C:\\Users\\tomas\\Downloads\\iloveimg-resized\\lobo-gris.png")); // NOI18N
        getContentPane().add(L, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 380, 50, 60));

        C.setIcon(new javax.swing.ImageIcon("C:\\Users\\tomas\\Downloads\\iloveimg-resized\\colp_preview_rev_1.png")); // NOI18N
        getContentPane().add(C, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 450, 60, 70));

        bote.setIcon(new javax.swing.ImageIcon("C:\\Users\\tomas\\Downloads\\iloveimg-resized\\d.png")); // NOI18N
        getContentPane().add(bote, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 390, 160, 90));

        bankLeft.setIcon(new javax.swing.ImageIcon("C:\\Users\\tomas\\Downloads\\iloveimg-resized\\cesped.jpeg")); // NOI18N
        getContentPane().add(bankLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 210, 400));

        rio.setIcon(new javax.swing.ImageIcon("C:\\Users\\tomas\\Downloads\\iloveimg-resized\\acidificacion-oceano.jpg")); // NOI18N
        getContentPane().add(rio, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, 300, 400));

        bankRight.setIcon(new javax.swing.ImageIcon("C:\\Users\\tomas\\Downloads\\iloveimg-resized\\cesped.jpeg")); // NOI18N
        getContentPane().add(bankRight, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 240, 210, 400));

        Graph.setColumns(20);
        Graph.setRows(5);
        jScrollPane1.setViewportView(Graph);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 240, 240, 400));

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Grafo de estados");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 220, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProfundidadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnProfundidadMouseClicked
        //     Configuracion del estado inicial      
        setInitialState();
        valid = util.isAllow(left, right);

        if (valid) {
            this.search();
        } else {
            //custom title, error icon
            JOptionPane.showMessageDialog(this,
                    "Alguien ha muerto.",
                    "Estado Inicial No valido",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnProfundidadMouseClicked


    private void initGranjeroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_initGranjeroItemStateChanged
        farmerTo();
    }//GEN-LAST:event_initGranjeroItemStateChanged

    private void initLoboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_initLoboItemStateChanged
        wolfTo();
    }//GEN-LAST:event_initLoboItemStateChanged

    private void initOvejaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_initOvejaItemStateChanged
        shepTo();
    }//GEN-LAST:event_initOvejaItemStateChanged

    private void initColItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_initColItemStateChanged
        cabbageTo();
    }//GEN-LAST:event_initColItemStateChanged

    public void setInitialState() {
        Boolean n;
        left.clear();
        right.clear();
        String initFarmer = this.initGranjero.getSelectedItem().toString();
        String initWolf = this.initLobo.getSelectedItem().toString();
        String initShep = this.initOveja.getSelectedItem().toString();
        String initCabbage = this.initCol.getSelectedItem().toString();
        if (initFarmer.equals("left")) {
            left.add("G");
            bank = "left";
        } else {
            right.add("G");
            bank = "right";
        }
        n = initWolf.equals("left") ? left.add("L") : right.add("L");
        n = initShep.equals("left") ? left.add("O") : right.add("O");
        n = initCabbage.equals("left") ? left.add("C") : right.add("C");

        //EstadoAcomodamiento de los objetos
        shepTo();
        wolfTo();
        farmerTo();
        cabbageTo();
    }

    private void search() {
        //Creacion del grafo de estados usando la busqueda en profundidad
        obj.startBreadthFirstSearch(bank, left, right);
        //     Grafo de estados
        String states = obj.toStringBFSGraph();
        Graph.setText(states);

        ArrayList<String> solucion = obj.getSolutionBFS();

        Thread animation = new Thread(new Runnable() {
            @Override
            public void run() {
                for (String s : solucion) {
                    move(s.split("movimientos"));

                    try {
                        //Envia el hilo actual de ejecuacion a dormir X milisegundos
                        Thread.sleep(4000);

                    } catch (InterruptedException ie) {
                    }
                }
                obj.clearSearch();
            }
        });
        animation.start();
    }

    private void move(String[] split) {
        if ("G".equals(split[0].trim()) && "right".equals(split[1].trim())) {
            translateFarmerRight();
        }
        if ("G".equals(split[0].trim()) && "left".equals(split[1].trim())) {
            translateFarmerLeft();
        }
        if ("GL".equals(split[0].trim()) && "right".equals(split[1].trim())) {
            translateFarmerWolfRight();
        }
        if ("GL".equals(split[0].trim()) && "left".equals(split[1].trim())) {
            translateFarmerWolfLeft();
        }
        if ("GO".equals(split[0].trim()) && "right".equals(split[1].trim())) {
            translateFarmerShepRight();
        }
        if ("GO".equals(split[0].trim()) && "left".equals(split[1].trim())) {
            translateFarmerShepLeft();
        }
        if ("GC".equals(split[0].trim()) && "right".equals(split[1].trim())) {
            translateFarmerCabbageRight();
        }
        if ("GC".equals(split[0].trim()) && "left".equals(split[1].trim())) {
            translateFarmerCabbageLeft();
        }
    }

    // F - Animations
    public void translateFarmerRight() {
        final int max_r_x = 540;
        Thread animation = new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 140;
                while (true) {
                    G.setLocation(x, 350);
                    x += 20;
                    if (x > max_r_x) {
                        G.setLocation(x, y_granjero_pos);
                        break;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {

                    }
                }
            }
        });
        animation.start();
    }

    public void translateFarmerLeft() {
        final int min_l_x = 140;
        Thread animation = new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 540;
                while (true) {
                    G.setLocation(x, 350);
                    moverBote(x);
                    x -= 20;
                    if (x < min_l_x) {
                        G.setLocation(x, y_granjero_pos);
                        break;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {

                    }
                }

            }
        });
        animation.start();
    }

    // FW - Animations
    public void translateFarmerWolfRight() {
        final int max_r_x = 540;
        Thread animation = new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 140;
                while (true) {
                    G.setLocation(x, 350);
                    L.setLocation(x, y_lobo_pos);
                    bote.setLocation(x, 390);
                    x += 20;
                    if (x > max_r_x) {
                        moverBote(x - 200);
                        G.setLocation(x, y_granjero_pos);
                        break;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {

                    }
                }
            }
        });
        animation.start();
    }

    public void translateFarmerWolfLeft() {
        final int max_l_x = 140;
        Thread animation = new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 540;
                while (true) {
                    G.setLocation(x, 350);
                    L.setLocation(x, y_lobo_pos);
                    bote.setLocation(x, 390);
                    x -= 20;
                    if (x < max_l_x) {
                        moverBote(x + 20);
                        G.setLocation(x, y_granjero_pos);
                        break;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {

                    }
                }
            }
        });
        animation.start();
    }

    // FS - Animations
    public void translateFarmerShepRight() {
        final int max_r_x = 540;
        int y = 270;
        Thread animation = new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 140;
                while (true) {
                    G.setLocation(x, 350);
                    O.setLocation(x, 380);
                    moverBote(x);
                    x += 20;
                    if (x > max_r_x) {
                        moverBote(x - 200);
                        G.setLocation(x, y_granjero_pos);
                        O.setLocation(x, y_oveja_pos);
                        break;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {

                    }
                }
            }
        });
        animation.start();
    }

    public void translateFarmerShepLeft() {
        final int max_l_x = 140;
        Thread animation = new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 540;
                while (true) {
                    G.setLocation(x, 360);
                    O.setLocation(x, 380);
                    moverBote(x);
                    x -= 20;
                    if (x < max_l_x) {
                        moverBote(x + 20);
                        G.setLocation(x, y_granjero_pos);
                        O.setLocation(x, y_oveja_pos);
                        break;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {

                    }
                }
            }
        });
        animation.start();
    }

    //FC - Animations
    public void translateFarmerCabbageRight() {
        final int max_r_x = 540;
        Thread animation = new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 140;
                while (true) {
                    G.setLocation(x, 350);
                    C.setLocation(x, 380);
                    moverBote(x);
                    x += 20;
                    if (x > max_r_x) {
                        moverBote(x - 200);
                        G.setLocation(x, y_granjero_pos);
                        C.setLocation(x, y_col_pos);
                        break;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {

                    }
                }
            }
        });
        animation.start();
    }

    public void translateFarmerCabbageLeft() {
        final int max_l_x = 140;
        Thread animation = new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 540;
                while (true) {
                    G.setLocation(x, 350);
                    C.setLocation(x, 380);
                    moverBote(x);
                    x -= 20;
                    if (x < max_l_x) {
                        moverBote(x + 20);
                        G.setLocation(x, y_granjero_pos);
                        C.setLocation(x, y_col_pos);
                        moverBote(x);
                        break;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {

                    }
                }
            }
        });
        animation.start();
    }

    //Moves
    public void moverBote(int x) {
        bote.setLocation(x, 390);
    }

    public void farmerTo() {
        String initFarmer = this.initGranjero.getSelectedItem().toString();
        if (initFarmer.equals("left")) {
            G.setLocation(140, y_granjero_pos);
        } else {
            G.setLocation(540, y_granjero_pos);
        }
    }

    public void wolfTo() {
        String initFarmer = this.initLobo.getSelectedItem().toString();
        if (initFarmer.equals("left")) {
            L.setLocation(140, y_lobo_pos);
        } else {
            L.setLocation(540, y_lobo_pos);
        }
    }

    public void shepTo() {
        String initFarmer = this.initOveja.getSelectedItem().toString();
        if (initFarmer.equals("left")) {
            O.setLocation(140, y_oveja_pos);
        } else {
            O.setLocation(540, y_oveja_pos);
        }
    }

    public void cabbageTo() {
        String initFarmer = this.initCol.getSelectedItem().toString();
        if (initFarmer.equals("left")) {
            C.setLocation(140, y_col_pos);
        } else {
            C.setLocation(540, y_col_pos);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FarmerPuzzleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FarmerPuzzleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FarmerPuzzleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FarmerPuzzleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FarmerPuzzleGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel C;
    private javax.swing.JLabel G;
    private javax.swing.JTextArea Graph;
    private javax.swing.JLabel L;
    private javax.swing.JLabel O;
    private javax.swing.JLabel bankLeft;
    private javax.swing.JLabel bankRight;
    private javax.swing.JLabel bote;
    private javax.swing.JButton btnAnchura;
    private javax.swing.JButton btnProfundidad;
    private javax.swing.JComboBox<String> initCol;
    private javax.swing.JComboBox<String> initGranjero;
    private javax.swing.JComboBox<String> initLobo;
    private javax.swing.JComboBox<String> initOveja;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel rio;
    // End of variables declaration//GEN-END:variables

}
